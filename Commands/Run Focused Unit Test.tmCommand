<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>saveActiveFile</string>
	<key>captureFormatString</key>
	<string>$0</string>
	<key>capturePattern</key>
	<string>(/[^:]+):(\d+)</string>
	<key>command</key>
	<string># Assumes the current file is a unittest file
# Runs with the currently-focused method as the test name

args=$(${TM_RUBY:=ruby} &lt;&lt;"EOF"

def parse_from_quotes(name)
  name.to_s.gsub(/^(?:.*"(.*)"|.*'(.*)').*$/) { $1 || $2 }
end

def parse_should_from_quotes(name)
  should_name_parts = []
    
  should_name_parts &lt;&lt; parse_from_quotes(name)
  if name =~ /^\s*use_should/    
    result = should_be_part = when_part = with_part = nil
    should_be_part = result[1] if result = name.match(/.*use_should\(?\s*"(.*?)"\)?.*/) || name.match(/.*use_should\(?\s*'(.*?)'\)?.*/) #weird error when trying to match (["']) with \1 in match, so have to do this wet double match
    when_part = result[1] if result = name.match(/.*when\(?\s*"(.*?)"\)?.*/) || name.match(/.*when\(?\s*'(.*?)'\)?.*/)
    with_part = result[1] if result = name.match(/.*with\(?\s*"(.*?)"\)?.*/) || name.match(/.*with\(?\s*'(.*?)'\)?.*/)
    should_name_parts.push('when', when_part) if when_part
    should_name_parts.push('with', with_part) if with_part
    should_name_parts.push('should', should_be_part) if should_be_part
    should_name_parts.shift

  elsif name =~ /^\s*should_/
    should_name_parts &lt;&lt; name.to_s.gsub(/.*(should_[\w_]+).*/, '\1').gsub("_", ' ')
    should_name_parts[-1].gsub!("should", "should( be)?") if name =~ /^\s*should_be/

  else
    should_name_parts.unshift('should')
  end
  
  return should_name_parts.join(" ")
end

def indentation_level(line)
  if match = line.match(/(\s*)\w/)
    match[1].size
  else
    0
  end
end

n = ENV['TM_LINE_NUMBER'].to_i

should_line = ''
lines = nil
File.open(ENV['TM_FILEPATH']) do |f|
  lines     = f.read.split("\n")[0...n].reverse
  should_line = lines.detect { |line| line =~ /^\s*(use_)?should/ }
end

if !should_line.empty?
  puts "shoulda"
  
  should = parse_should_from_quotes(should_line)
  indentation_level_of_should = indentation_level(should_line)
  context_line = lines.detect { |line| line =~ /^\s*context\b/ and indentation_level(line) &lt; indentation_level_of_should }
  context = parse_from_quotes(context_line)
  name = "#{context} #{should}".gsub(/[\$\?\+\.\s\'\"\(\)]/,'.?')
  print "--name=/#{name}/ -v v"
end

EOF)

if [[ -z "$args" ]]; then
  echo -e "This doesn't appear to be a TestCase class."
  exit_show_tool_tip
  fi

  export RUBYLIB="$TM_BUNDLE_SUPPORT/RubyMate${RUBYLIB:+:$RUBYLIB}"
  "${TM_RUBY:-ruby}" -- "$TM_BUNDLE_SUPPORT/RubyMate/run_script.rb" $args</string>
	<key>fileCaptureRegister</key>
	<string>1</string>
	<key>input</key>
	<string>document</string>
	<key>keyEquivalent</key>
	<string>@R</string>
	<key>lineCaptureRegister</key>
	<string>2</string>
	<key>name</key>
	<string>Run Focused Should</string>
	<key>output</key>
	<string>showAsHTML</string>
	<key>scope</key>
	<string>source.ruby.rails.shoulda</string>
	<key>uuid</key>
	<string>6AFF5956-7774-4175-A005-9A03AF7F29B3</string>
</dict>
</plist>
